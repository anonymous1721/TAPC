module tap {
  //======================================================================//
  // Enclave operation                                                    //
  //======================================================================//
  procedure [inline] EnclaveStep(
      /* Current mode */      mode              : mode_t,
      /* Secret Enclave */    eid               : tap_enclave_id_t,
      /* Operation. */        op                : tap_proof_op_t)

      returns (
          /* mode     */  next_mode : mode_t, 
          /* read     */  load_addr : vaddr_t, l_way : cache_way_index_t,
          /* store    */  store_addr : vaddr_t, store_data : word_t, s_way : cache_way_index_t
      )
      //modifies tap_enclave_metadata_valid;
      modifies tap_enclave_metadata_addr_map;
      modifies tap_enclave_metadata_addr_valid;
      modifies tap_enclave_metadata_addr_excl;
      modifies tap_enclave_metadata_pc;
      modifies tap_enclave_metadata_regs;
      modifies tap_enclave_metadata_paused;
      modifies tap_enclave_metadata_cache_conflict;
      modifies cache_valid_map, cache_tag_map;
      modifies cpu_pc;
      modifies cpu_regs;
      modifies cpu_mem;
      modifies cpu_enclave_id;
      modifies cpu_addr_map;
      modifies cpu_addr_valid;
  {
      var vaddr  : vaddr_t;
      var word   : word_t;
      var excp   : exception_t;
      var status : enclave_op_result_t;
      var hit    : boolean;
      var owner  : tap_enclave_id_t;
      var way    : cache_way_index_t;

      assume (op == tap_proof_op_exit);

      call (status) = exit();
      assert status == enclave_op_success;
      // switch back to the observer. 
      next_mode = mode_untrusted;
  }

  //======================================================================//
  // Transition relation                                                  //
  //======================================================================//
  next {
    assume (tap_current_mode == mode_enclave);
    call (tap_current_mode', tap_load_addr', tap_l_way', tap_store_addr', tap_store_data', tap_s_way') = EnclaveStep(tap_current_mode, tap_eid, tap_e_proof_op);
  }
}
