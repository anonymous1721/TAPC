/*  Confidentiality proof's full observer step operation.
*/
module tap {
  //======================================================================//
  // Observer operation                                                   //
  //======================================================================//
  procedure [inline] ObserverStep(
    /* observer          */ observer          : observer_t,
    /* Current mode      */ mode              : mode_t,
    /* Secret Enclave    */ eid               : tap_enclave_id_t,
    /* Adversary Enclave */ r_eid             : tap_enclave_id_t,
    /* Parent Enclave    */ r_parent_eid      : tap_enclave_id_t,
    /* Operation.        */ op                : tap_proof_op_t,
    /* next PC value.    */ r_pc              : vaddr_t,
    /* reg to read.      */ r_read            : regindex_t,
    /* reg to write      */ r_write           : regindex_t,
    /* data to write     */ r_data            : word_t,
    /* mem. to read.     */ l_vaddr           : vaddr_t,
    /* mem to write      */ s_vaddr           : vaddr_t,
    /* data to write     */ s_data            : word_t,
    /* pt entry to read  */ r_pt_eid          : tap_enclave_id_t, 
    /* pt entry to read  */ r_pt_va           : vaddr_t,
    /* pt eid            */ pt_eid            : tap_enclave_id_t,
    /* pt vaddr          */ pt_vaddr          : vaddr_t,
    /* pt valid          */ pt_valid          : addr_perm_t,
    /* pt paddr          */ pt_paddr          : wap_addr_t,
    /* VA->PA valid      */ r_addr_valid      : addr_valid_t,
    /* VA->PA map        */ r_addr_map        : addr_map_t,
    /* VA->excl map      */ r_excl_vaddr      : excl_vaddr_t,
    /* Private Mem Map   */ r_excl_map        : excl_map_t,
    /* Container Valid   */ r_container_valid : container_valid_t,
    /* Container Data    */ r_container_data  : container_data_t,
    /* Entrypoint        */ r_entrypoint      : vaddr_t,
    /* blocked mem       */ r_bmap            : excl_map_t,
    /* ways to change.   */ l_way, s_way      : cache_way_index_t)

    returns (observation: word_t, next_mode : mode_t, enclave_dead : boolean, status : enclave_op_result_t, excp_1 : exception_t, excp_2 : exception_t, hit_1 : boolean, hit_2 : boolean)
    // PC stays reasonable.
    // Don't mess up TAP invariants.
    requires valid_regindex(r_read);
    requires valid_regindex(r_write);
    requires (observer == k_mem_observer_t   || 
              observer == k_cache_observer_t ||
              observer == k_pt_observer_t);

    requires valid_cache_way_index(s_way);
    requires valid_cache_way_index(l_way);

    ensures (op == tap_proof_op_compute) ==> 
                (cpu_enclave_id == old(cpu_enclave_id) &&
                 tap_enclave_metadata_valid == old(tap_enclave_metadata_valid) &&
                 tap_enclave_metadata_addr_excl == old(tap_enclave_metadata_addr_excl));

    modifies untrusted_addr_valid;
    modifies untrusted_addr_map;
    modifies untrusted_regs;
    modifies untrusted_pc;
    modifies tap_enclave_metadata_valid;
    modifies tap_enclave_metadata_addr_map;
    modifies tap_enclave_metadata_addr_valid;
    modifies tap_enclave_metadata_addr_excl;
    modifies tap_enclave_metadata_entrypoint;
    modifies tap_enclave_metadata_pc;
    modifies tap_enclave_metadata_regs;
    modifies tap_enclave_metadata_paused;
    modifies tap_enclave_metadata_cache_conflict;
    modifies tap_enclave_metadata_is_snapshot;
    modifies tap_enclave_metadata_child_count;
    modifies tap_enclave_metadata_wap_addr_free;
    modifies tap_enclave_metadata_root_snapshot;
    modifies cache_valid_map;
    modifies cache_tag_map;
    modifies cpu_mem;
    modifies cpu_enclave_id;
    modifies cpu_addr_map;
    modifies cpu_addr_valid;
    modifies cpu_pc;
    modifies cpu_regs;
    modifies cpu_owner_map;
  {
    // "default" for the next mode.
    next_mode = mode;
    // "default" for whether we kill enclave eid.
    enclave_dead = false;

    // start with a dummy observation.
    observation = k0_word_t;
    status = enclave_op_success;
    havoc excp_1;
    havoc excp_2;
    assume (excp_1 != excp_none);
    assume (excp_2 != excp_none);
    hit_1 = false;
    hit_2 = false;

    case
      (op == tap_proof_op_compute) : {
        case
        (observer == k_mem_observer_t) : {
          call (observation) = MemObserverComputation(r_pc, r_read, r_write, r_data,
                                                     l_vaddr, s_vaddr, s_data,
                                                     r_pt_eid, r_pt_va,
                                                     pt_eid, pt_vaddr, pt_valid, pt_paddr);
        } 
        (observer == k_cache_observer_t) : {
          call (observation, hit_1, hit_2, excp_1, excp_2) = CacheObserverComputation(r_pc, r_read, r_write, r_data,
                                                       l_vaddr, s_vaddr, s_data,
                                                       r_pt_eid, r_pt_va,
                                                       pt_eid, pt_vaddr, pt_valid, pt_paddr,
                                                       l_way, s_way);
        } 
        (observer == k_pt_observer_t) : {
          call (observation, excp_1) = PTObserverComputation(r_pc, r_read, r_write, r_data,
                                                    l_vaddr, s_vaddr, s_data,
                                                    r_pt_eid, r_pt_va,
                                                    pt_eid, pt_vaddr, pt_valid, pt_paddr);
          assert (block_os_ev_read && (tap_enclave_metadata_addr_excl[r_pt_eid])[r_pt_va])
          ==> (observation == uf_observation_pt(k0_addr_perm_t, k0_wap_addr_t));
          assert (cpu_enclave_id != tap_null_enc_id || !tap_enclave_metadata_valid[r_pt_eid])
          ==> (observation == uf_observation_pt(k0_addr_perm_t, k0_wap_addr_t));

        }
        esac
      } 
      (op == tap_proof_op_launch) : {
        // can't put current pc inside the enclave.
        assume !r_excl_map[cpu_addr_map[cpu_pc]];
        call InitOSMem(r_container_valid, r_container_data);
        call (status) = launch(r_eid, r_addr_valid, r_addr_map, 
                              r_excl_vaddr, r_excl_map, r_entrypoint);
        assert (r_eid == eid) ==> (status != enclave_op_success);
      } 
      (op == tap_proof_op_destroy) : {
        call (status) = destroy(r_eid);
        // the enclave has been destroyed.
        if (r_eid == eid && status == enclave_op_success) {
            enclave_dead = true;
        }
      } 
      (op == tap_proof_op_enter) : {
        call (status) = enter(r_eid);
        assert (cpu_enclave_id == tap_null_enc_id && r_eid == eid) ==> 
                (status == enclave_op_success);
        // switch to enclave mode.
        if (r_eid == eid && status == enclave_op_success) {
            next_mode = mode_enclave;
        }
      } 
      (op == tap_proof_op_exit) : {
          call (status) = exit();
      } 
      (op == tap_proof_op_resume) : {
        call (status) = resume(r_eid);
        // switch to enclave mode.
        assert (cpu_enclave_id == tap_null_enc_id && r_eid == eid && tap_enclave_metadata_paused[eid]) ==> 
                (status == enclave_op_success);
        if (r_eid == eid && status == enclave_op_success) {
            next_mode = mode_enclave;
        }
      } 
      (op == tap_proof_op_pause) : {
          call (status) = pause();
      }
      (op == tap_proof_op_clone) : {
        call (status) = clone(r_eid, r_parent_eid, r_excl_map);
      }
      (op == tap_proof_op_release) : {
          call (status) = release_blocked_memory(r_bmap);
      } 
      (op == tap_proof_op_block) : {
          call (status) = block_memory_region(r_bmap);
      }
    esac
  }
}