module tap {
  //======================================================================//
  // Enclave operation                                                    //
  //======================================================================//
  procedure [inline] IntegrityEnclaveStep(
      /* what operation?  */  op : tap_proof_op_t, 
      /* which iteration? */  iter : integer
  )
    returns (next_mode : mode_t, vaddr : vaddr_t, paddr : wap_addr_t, data : word_t)
    ensures (op == tap_proof_op_compute ==> next_mode == mode_enclave);
    ensures (op != tap_proof_op_compute ==> next_mode == mode_untrusted);
    modifies tap_enclave_metadata_valid;
    modifies tap_enclave_metadata_addr_map;
    modifies tap_enclave_metadata_addr_valid;
    modifies tap_enclave_metadata_pc;
    modifies tap_enclave_metadata_regs;
    modifies tap_enclave_metadata_paused;
    modifies tap_enclave_metadata_wap_addr_free;
    modifies tap_enclave_metadata_is_snapshot;
    modifies cpu_pc;
    modifies cpu_regs;
    modifies cpu_mem;
    modifies cpu_addr_valid;
    modifies cpu_enclave_id;
    modifies cpu_addr_map;
    modifies cpu_regs;
    modifies cache_valid_map, cache_tag_map;
  {
    var status : enclave_op_result_t;
    assert tap_proof_op_valid_in_enclave(op);

    vaddr = k0_vaddr_t;
    paddr = k0_wap_addr_t;
    data = k0_word_t;

    // in enclave-mode:
    case
        (op == tap_proof_op_pause) : {
          call (status) = pause();
          assert status == enclave_op_success;
          next_mode = mode_untrusted;
        }
        (op == tap_proof_op_snapshot) : {
          call (status) = snapshot();
          if (status == enclave_op_success) {
            next_mode = mode_untrusted;
          } else {
            next_mode = mode_enclave;
          }
        }
        (op == tap_proof_op_exit) : {
          call (status) = exit();
          assert status == enclave_op_success;
          next_mode = mode_untrusted;
        }
        (op == tap_proof_op_compute) : {
          call (vaddr, paddr, data) = EnclaveComputation(iter);
          next_mode = mode_enclave;
        }
    esac
  }
}